#include <micro_ros_arduino.h>
#include <geometry_msgs/msg/twist.h>
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <rmw_microros/rmw_microros.h>
#include <micro_ros_arduino.h>
#include <nav_msgs/msg/odometry.h>
#include <cstdio>
#include <cstdlib>
#include <math.h>
#include <std_msgs/msg/int32_multi_array.h>


// Variables for odometry
float x = 0.0;      // Current x position
float y = 0.0;      // Current y position
float theta = 0.0;  // Current orientation

unsigned long last_time = 0;  // Previous time for calculation

// Array to store encoder tick counts for drive wheels
int32_t drive_ticks[4] = {0}; // FL, FR, RL, RR

// Array to store encoder tick counts for steering wheels
int32_t steer_ticks[4] = {0}; // FL, FR, RL, RR

// MicroROS Publishers
rcl_publisher_t tick_publisher;
rcl_publisher_t odom_publisher;

// ROS Messages
std_msgs__msg__Int32MultiArray tick_msg;
nav_msgs__msg__Odometry odom_msg;

#define STEER_TICKS_PER_REV 1024  
// Motor and wheel configuration
#define TICKS_PER_REV 2048
#define MAX_PWM 255
#define WHEEL_RADIUS 123
#define TRACK_WIDTH 732.28
#define WHEEL_BASE 820
#define PI 3.14159265


// Encoder pin definitions for drive and steering wheels (replace as per setup)
#define FL_DRIVE_ENC_A 0
#define FL_DRIVE_ENC_B 1
#define FR_DRIVE_ENC_A 15
#define FR_DRIVE_ENC_B 14
#define RL_DRIVE_ENC_A 21
#define RL_DRIVE_ENC_B 20
#define RR_DRIVE_ENC_A 28
#define RR_DRIVE_ENC_B 29

#define FL_STEER_ENC_A 7
#define FL_STEER_ENC_B 8
#define FR_STEER_ENC_A 16
#define FR_STEER_ENC_B 17
#define RL_STEER_ENC_A 25
#define RL_STEER_ENC_B 24
#define RR_STEER_ENC_A 34
#define RR_STEER_ENC_B 35


// --- Motor Driver Pins ---
#define FL_DRIVE_PWM 3
#define FL_DRIVE_DIR 4
#define FR_DRIVE_PWM 5
#define FR_DRIVE_DIR 6
#define RL_DRIVE_PWM 9
#define RL_DRIVE_DIR 10
#define RR_DRIVE_PWM 11
#define RR_DRIVE_DIR 12

 #include "CytronMotorDriver.h"


// Configure the motor driver.
CytronMD motor1(PWM_DIR, 3, 4);  // PWM 1 = Pin 3, DIR 1 = Pin 4.
CytronMD motor2(PWM_DIR, 5, 6); 
CytronMD motor3(PWM_DIR, RL_DRIVE_PWM, RL_DRIVE_DIR);  // PWM 1 = Pin 3, DIR 1 = Pin 4.
CytronMD motor4(PWM_DIR, RR_DRIVE_PWM, RR_DRIVE_DIR); 

#define FL_STEER_PWM 18
#define FL_STEER_DIR 19
#define FR_STEER_PWM 36
#define FR_STEER_DIR 37
#define RL_STEER_PWM 22
#define RL_STEER_DIR 23
#define RR_STEER_PWM 2
#define RR_STEER_DIR 33
const int ledPin = 13;

// ROS 2 Node and Subscription
rcl_subscription_t cmd_vel_sub;
rcl_publisher_t odom_pub;
rclc_executor_t executor;
rcl_allocator_t allocator;
rclc_support_t support;
rcl_node_t node;
const int K_P = 278;
double basePWM=0;
double vx=0,vy=0,omega=0;

// Y-intercept for the PWM-Linear Velocity relationship for the robot
const int b = 52;
// Odometry variables




// Motor parameters
int ticks_left_front = 0, ticks_right_front = 0, ticks_left_rear = 0, ticks_right_rear = 0;


// Wheel speed and angle
double fl_speed, fr_speed, rl_speed, rr_speed;
double fl_angle, fr_angle, rl_angle, rr_angle;

#define ENCODER_MAXIMUM 32023
#define ENCODER_MINIMUM -32023

// --- Motor Control Functions ---
void setDriveMotor(CytronMD& motor, int pwm_pin, int dir_pin, double speed) {
    basePWM = K_P * fabs(speed) + b;
    speed = constrain(basePWM, 0, MAX_PWM);
    // Adjust motor direction and speed based on the PWM signal
    if (vx >= 0 && vy==0 && omega==0) {
        digitalWrite(dir_pin, HIGH);     // Set motor speed forward
 // Forward direction
        motor.setSpeed(speed);   
    } else if (vx < 0 && vy==0 && omega==0) {
        digitalWrite(dir_pin, LOW);  // Reverse direction
  // Reverse direction
        motor.setSpeed(-speed);  
            // Set motor speed in reverse (assuming negative speed means reverse)
    } else   if (vy >= 0 && vx==0 && omega==0) {
        digitalWrite(dir_pin, HIGH);     // Set motor speed forward
 // Forward direction
        motor.setSpeed(speed);   
    } else if (vy < 0 && vx==0 && omega==0) {
        digitalWrite(dir_pin, LOW);  // Reverse direction
  // Reverse direction
        motor.setSpeed(-speed);  
            // Set motor speed in reverse (assuming negative speed means reverse)
    } else    if (omega >= 0 && vy==0 && vx==0) {
        digitalWrite(dir_pin, HIGH);     // Set motor speed forward
 // Forward direction
        motor.setSpeed(speed);   
    } else if (omega < 0 && vy==0 && vx==0) {
        digitalWrite(dir_pin, LOW);  // Reverse direction
  // Reverse direction
        motor.setSpeed(-speed);  
            // Set motor speed in reverse (assuming negative speed means reverse)
    }  else {
        motor.setSpeed(0);           // Stop the motor if speed is zero
    }

    // Ensure the speed is within bounds
}


void setSteerMotor(int pwm_pin, int dir_pin, double target_angle, int steer_ticks) {
    double current_angle = calculateCurrentAngle(steer_ticks);  // Get current angle from encoder feedback
    
    // Calculate the error
    double error = target_angle - current_angle;

    // Define a tolerance for stopping the motor
    const double tolerance = 0.05;

    if (fabs(error) > tolerance) {
        int pwm_value = map(fabs(error) * 100, 0, 90 * 100, 0, MAX_PWM);
        pwm_value = constrain(pwm_value, 0, MAX_PWM);

        analogWrite(pwm_pin, pwm_value);

        if (error > 0) {
            digitalWrite(dir_pin, HIGH);  // Rotate in one direction
        } else {
            digitalWrite(dir_pin, LOW);   // Rotate in the opposite direction
        }
    } else {
        analogWrite(pwm_pin, 0);  // Stop the motor
    }
}


double calculateCurrentAngle(int steer_ticks) {
    // Convert steer ticks to angle in degrees (assuming -90° to 90° range)
    return (steer_ticks / (double)STEER_TICKS_PER_REV) * 360.0 - 180.0;
}

double normalizeAngle(double angle) {
    // Normalize the angle to the range [-90, 90]
    while (angle > 90) angle -= 180;
    while (angle < -90) angle += 180;
    return angle;
}

// --- Swerve Kinematics ---
void calculateSwerve(double vx, double vy, double omega) {
    // Calculate wheel speeds and angles based on the input velocity and omega values.
    double A = vx - omega * (TRACK_WIDTH / 2);
    double B = vx + omega * (TRACK_WIDTH / 2);
    double C = vy - omega * (WHEEL_BASE / 2);
    double D = vy + omega * (WHEEL_BASE / 2);

    // Compute wheel speeds
    fl_speed = sqrt(B * B + D * D);
    fr_speed = sqrt(B * B + C * C);
    rl_speed = sqrt(A * A + D * D);
    rr_speed = sqrt(A * A + C * C);

    // Compute wheel angles (steering)
    fl_angle = atan2(D, B);
    fr_angle = atan2(C, B);
    rl_angle = atan2(D, A);
    rr_angle = atan2(C, A);

    // Normalize speed if needed
    double max_speed = max(max(fl_speed, fr_speed), max(rl_speed, rr_speed));
    if (max_speed > MAX_PWM) {
        fl_speed = (fl_speed / max_speed) * MAX_PWM;
        fr_speed = (fr_speed / max_speed) * MAX_PWM;
        rl_speed = (rl_speed / max_speed) * MAX_PWM;
        rr_speed = (rr_speed / max_speed) * MAX_PWM;
    }
}


// --- ROS Callback ---
geometry_msgs__msg__Twist cmd_vel_msg;

void cmd_vel_callback(const void *msg_in) {
    const geometry_msgs__msg__Twist *cmd = (const geometry_msgs__msg__Twist *)msg_in;

     vx = cmd->linear.x;   // Joystick forward/backward
     vy = cmd->linear.y;   // Joystick sideways strafing
     omega = cmd->angular.z; // Joystick rotation
    
    calculateSwerve(vx, vy, omega);
    if(basePWM<0){
  digitalWrite(ledPin, HIGH);   // set the LED on
    }else{
  digitalWrite(ledPin, LOW);   // set the LED on

    }
    // Set Drive Motors (wheel speeds)
    setDriveMotor(motor1, FL_DRIVE_PWM, FL_DRIVE_DIR, fl_speed);
    setDriveMotor(motor2, FR_DRIVE_PWM, FR_DRIVE_DIR, fr_speed);
    setDriveMotor(motor3, RL_DRIVE_PWM, RL_DRIVE_DIR, rl_speed);
    setDriveMotor(motor4, RR_DRIVE_PWM, RR_DRIVE_DIR, rr_speed);

    // Set Steering Motors (wheel angles)
setSteerMotor(FL_STEER_PWM, FL_STEER_DIR, normalizeAngle(fl_angle), steer_ticks[0]);

setSteerMotor(FR_STEER_PWM, FR_STEER_DIR, normalizeAngle(fr_angle), steer_ticks[1]);

setSteerMotor(RL_STEER_PWM, RL_STEER_DIR, normalizeAngle(rl_angle), steer_ticks[2]);

setSteerMotor(RR_STEER_PWM, RR_STEER_DIR, normalizeAngle(rr_angle), steer_ticks[3]);


    // Stop drive motors when joystick is neutral
    if (vx == 0 && vy == 0 && omega == 0) {
        analogWrite(FL_DRIVE_PWM, 0);
        analogWrite(FR_DRIVE_PWM, 0);
        analogWrite(RL_DRIVE_PWM, 0);
        analogWrite(RR_DRIVE_PWM, 0);
        analogWrite(FL_STEER_PWM, 0);
        analogWrite(FR_STEER_PWM, 0);
        analogWrite(RL_STEER_PWM, 0);
        analogWrite(RR_STEER_PWM, 0);        
    }
}

// Last known states for quadrature decoding (for drive wheels)
int last_drive_val[4] = {HIGH, HIGH, HIGH, HIGH};

// Last known states for quadrature decoding (for steer wheels)
int last_steer_val[4] = {HIGH, HIGH, HIGH, HIGH};

// Interrupt service routines for drive and steer wheels
void encoderDriveFL() { update_wheel_tick(0, FL_DRIVE_ENC_A, FL_DRIVE_ENC_B, drive_ticks, last_drive_val); }
void encoderDriveFR() { update_wheel_tick(1, FR_DRIVE_ENC_A, FR_DRIVE_ENC_B, drive_ticks, last_drive_val); }
void encoderDriveRL() { update_wheel_tick(2, RL_DRIVE_ENC_A, RL_DRIVE_ENC_B, drive_ticks, last_drive_val); }
void encoderDriveRR() { update_wheel_tick(3, RR_DRIVE_ENC_A, RR_DRIVE_ENC_B, drive_ticks, last_drive_val); }

void encoderSteerFL() { update_wheel_tick(0, FL_STEER_ENC_A, FL_STEER_ENC_B, steer_ticks, last_steer_val); }
void encoderSteerFR() { update_wheel_tick(1, FR_STEER_ENC_A, FR_STEER_ENC_B, steer_ticks, last_steer_val); }
void encoderSteerRL() { update_wheel_tick(2, RL_STEER_ENC_A, RL_STEER_ENC_B, steer_ticks, last_steer_val); }
void encoderSteerRR() { update_wheel_tick(3, RR_STEER_ENC_A, RR_STEER_ENC_B, steer_ticks, last_steer_val); }

// Update tick count for the specified motor
void update_wheel_tick(int index, int encoder_input1, int encoder_input2, int32_t *ticks, int *last_val) {
    int val1 = digitalRead(encoder_input1); // Channel A state
    int val2 = digitalRead(encoder_input2); // Channel B state

    // Determine direction based on the quadrature encoder logic
    if (val1 != last_val[index]) { // Channel A state changed
        if (val1 == val2) {
            // Moving forward
            ticks[index]++;
        } else {
            // Moving backward
            ticks[index]--;
        }
    }

    // Update the last known state of Channel A
    last_val[index] = val1;
}


// Compute odometry based on drive and steer encoder ticks
void computeOdometry() {
    unsigned long current_time = millis();
    float dt = (current_time - last_time) / 1000.0; // Time step in seconds

    // Convert drive wheel ticks to velocity (m/s)
    float v_FL = drive_ticks[0] * (2 * PI * WHEEL_RADIUS) / TICKS_PER_REV;
    float v_FR = drive_ticks[1] * (2 * PI * WHEEL_RADIUS) / TICKS_PER_REV;
    float v_RL = drive_ticks[2] * (2 * PI * WHEEL_RADIUS) / TICKS_PER_REV;
    float v_RR = drive_ticks[3] * (2 * PI * WHEEL_RADIUS) / TICKS_PER_REV;

    // Convert steer wheel ticks to angles (radians)
    float alpha_FL = (steer_ticks[0] / (float)STEER_TICKS_PER_REV) * 2 * PI;
    float alpha_FR = (steer_ticks[1] / (float)STEER_TICKS_PER_REV) * 2 * PI;
    float alpha_RL = (steer_ticks[2] / (float)STEER_TICKS_PER_REV) * 2 * PI;
    float alpha_RR = (steer_ticks[3] / (float)STEER_TICKS_PER_REV) * 2 * PI;

    // Compute robot velocities
    float v_x = (v_FL * cos(alpha_FL) + v_FR * cos(alpha_FR) + v_RL * cos(alpha_RL) + v_RR * cos(alpha_RR)) / 4.0;
    float v_y = (v_FL * sin(alpha_FL) + v_FR * sin(alpha_FR) + v_RL * sin(alpha_RL) + v_RR * sin(alpha_RR)) / 4.0;
    float omega = ((v_FR - v_FL) + (v_RR - v_RL)) / (2 * WHEEL_BASE); // Rotational velocity

    // Update robot position and orientation
    x += v_x * cos(theta) * dt - v_y * sin(theta) * dt;
    y += v_x * sin(theta) * dt + v_y * cos(theta) * dt;
    theta += omega * dt;

    theta = fmod(theta + 2 * PI, 2 * PI); // Normalize theta to 0 - 2π

    // Prepare and publish odometry message
    odom_msg.pose.pose.position.x = x;
    odom_msg.pose.pose.position.y = y;
    odom_msg.pose.pose.orientation.z = sin(theta / 2);
    odom_msg.pose.pose.orientation.w = cos(theta / 2);
    odom_msg.twist.twist.linear.x = v_x;
    odom_msg.twist.twist.linear.y = v_y;
    odom_msg.twist.twist.angular.z = omega;
    // Set the static frame IDs
    odom_msg.header.frame_id.data = (char*)malloc(10 * sizeof(char));
    strcpy(odom_msg.header.frame_id.data, "world"); // Parent frame
    odom_msg.header.frame_id.size = strlen(odom_msg.header.frame_id.data);
    odom_msg.header.frame_id.capacity = 10;

    odom_msg.child_frame_id.data = (char*)malloc(10 * sizeof(char));
    strcpy(odom_msg.child_frame_id.data, "base_link"); // Child frame
    odom_msg.child_frame_id.size = strlen(odom_msg.child_frame_id.data);
    odom_msg.child_frame_id.capacity = 10;
    rcl_publish(&odom_pub, &odom_msg, NULL);

    last_time = current_time;  
    //delay(100);  // Update rate (in milliseconds)

}

// Publish tick counts
void publish_ticks() {
    tick_msg.data.size = 8;
    tick_msg.data.data = (int32_t*)malloc(sizeof(int32_t) * 8);

    for (int i = 0; i < 4; i++) {
        tick_msg.data.data[i] = drive_ticks[i];
        tick_msg.data.data[i + 4] = steer_ticks[i];
    }

    rcl_publish(&tick_publisher, &tick_msg, NULL);
    free(tick_msg.data.data);
}


// --- Setup ---
void setup() {
    Serial.begin(115200);
    set_microros_transports();
  pinMode(ledPin, OUTPUT);

    pinMode(FL_DRIVE_DIR, OUTPUT);
    pinMode(FR_DRIVE_DIR, OUTPUT);
    pinMode(RL_DRIVE_DIR, OUTPUT);
    pinMode(RR_DRIVE_DIR, OUTPUT);

    pinMode(FL_STEER_DIR, OUTPUT);
    pinMode(FR_STEER_DIR, OUTPUT);
    pinMode(RL_STEER_DIR, OUTPUT);
    pinMode(RR_STEER_DIR, OUTPUT);


// Drive Encoder Pin Setup
pinMode(FL_DRIVE_ENC_A, INPUT);
pinMode(FL_DRIVE_ENC_B, INPUT);
attachInterrupt(digitalPinToInterrupt(FL_DRIVE_ENC_A), encoderDriveFL, CHANGE);

pinMode(FR_DRIVE_ENC_A, INPUT);
pinMode(FR_DRIVE_ENC_B, INPUT);
attachInterrupt(digitalPinToInterrupt(FR_DRIVE_ENC_A), encoderDriveFR, CHANGE);

pinMode(RL_DRIVE_ENC_A, INPUT);
pinMode(RL_DRIVE_ENC_B, INPUT);
attachInterrupt(digitalPinToInterrupt(RL_DRIVE_ENC_A), encoderDriveRL, CHANGE);

pinMode(RR_DRIVE_ENC_A, INPUT);
pinMode(RR_DRIVE_ENC_B, INPUT);
attachInterrupt(digitalPinToInterrupt(RR_DRIVE_ENC_A), encoderDriveRR, CHANGE);

// Steer Encoder Pin Setup
pinMode(FL_STEER_ENC_A, INPUT);
pinMode(FL_STEER_ENC_B, INPUT);
attachInterrupt(digitalPinToInterrupt(FL_STEER_ENC_A), encoderSteerFL, CHANGE);

pinMode(FR_STEER_ENC_A, INPUT);
pinMode(FR_STEER_ENC_B, INPUT);
attachInterrupt(digitalPinToInterrupt(FR_STEER_ENC_A), encoderSteerFR, CHANGE);

pinMode(RL_STEER_ENC_A, INPUT);
pinMode(RL_STEER_ENC_B, INPUT);
attachInterrupt(digitalPinToInterrupt(RL_STEER_ENC_A), encoderSteerRL, CHANGE);

pinMode(RR_STEER_ENC_A, INPUT);
pinMode(RR_STEER_ENC_B, INPUT);
attachInterrupt(digitalPinToInterrupt(RR_STEER_ENC_A), encoderSteerRR, CHANGE);


    allocator = rcl_get_default_allocator();
    rclc_support_init(&support, 0, NULL, &allocator);
    rclc_node_init_default(&node, "swerve_drive_node", "", &support);

    rclc_subscription_init_default(&cmd_vel_sub, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), "/cmd_vel");
    rclc_publisher_init_default(&odom_pub, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry), "/odom");


    rclc_publisher_init_default(&tick_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray), "motor_ticks");

    tick_msg.data.capacity = 8;
    tick_msg.data.size = 0;
    tick_msg.data.data = NULL;

    rclc_executor_init(&executor, &support.context, 2, &allocator);
    rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg, cmd_vel_callback, ON_NEW_DATA);

  }
    // set the LED on

// --- Loop ---
void loop() {
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    computeOdometry();
    publish_ticks();

}
